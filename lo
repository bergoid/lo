#!/bin/bash

. rabot-utils
if [ "$?" -ne "0" ]; then
  echo "$0: Error while sourcing rabot-utils" >&2
  exit 1
fi

. lo-utils
if [ "$?" -ne "0" ]; then
  echo "$0: Error while sourcing lo-utils" >&2
  exit 1
fi

scriptName=$(basename "$0")
scriptFullPath=$(readlink -f "$scriptName")
#echo scriptFullPath=$scriptFullPath

function showHelp
{
cat << DOCSTRING
Usage: $scriptName

If not in a tmux session: '$scriptName' starts a tmux session.
Then, a 2-pane left/right layout is created.
DOCSTRING
}

checkForHelp $1
require tmux


############################################################
#
# Print the number of panes in the current window
#
# numPanes
#
function numPanes
{
    try test -n "$TMUX"
    tmux display-message -p "#{window_panes}"
}


############################################################
#
# List all panes in current session, or in specified window only.
# On one line for every pane, print: window_id pane_id pane_title.
#
# listPanes [WINDOW_ID]
#
# WINDOW_ID : if specified, print only panes belonging to WINDOW_ID
#
function listPanes
{
    try test -n "$TMUX"

    if [ -n "$1" ]; then
        tmux list-panes -F "#{window_id} #{pane_id} #{pane_title}" -t "$1"
    else
        tmux list-panes -sF "#{window_id} #{pane_id} #{pane_title}"
    fi
}

# Write stdin to logfile
logop <&0  > /dev/null &

# If not in a tmux session: abort
if [ -z "$TMUX" ]; then

    exitWith 1 "ERROR: '$(basename "$0")' needs to be run inside 'tmux'"

else

    local windowName="$(tmux display-message -p "#{window_name}")"

    # If in a tmux session: check if we are in a 'lo' session
    if [ "$windowName" = "lo-front" ]; then

        editPaneID="$(listPanes | grep lo-edit | cut -d ' ' -f 1)"
        outputPaneID="$(listPanes | grep lo-output | cut -d ' ' -f 1)"

        try test -n "$editPanelID"
        try test -n "$outputPanelID"

    else

        if [ $(numPanes) -gt 2 ]; then
            errcho "ERROR: '$(basename "$0")' must be started from a tmux session with at most 2 panes"
            errcho "Current number of panes: $(numPanes)"
            exit 1
        fi

        # Rename the current window to 'lo-front'
        try tmux rename-window lo-front

        # Create a second pane, if absent
        if [ $(numPanes) -lt 2 ]; then
            # -h : split horizontally
            # -d : don't switch focus to new pane
            # -p 50 : split evenly (50%)
            # "bash" : run "bash" in new window
            try tmux split-window -h -d -p 50 "bash"
        fi

        # Set the title of the current pane
        try tmux select-pane -T lo-edit

        # Start vim in edit pane
        editPaneID="$(getCurrentPaneID)"
        try tmux send-keys -t "$editPaneID" "vim" Enter

        # Set the title of the other pane, and switch to it
        outputPaneID="$(getOtherPaneID)"
        try tmux select-pane -T lo-output -t "$outputPaneID"
        try tmux select-pane -t "$outputPaneID"

    fi

fi

# Start 'less +F ...' in output pane
try tmux send-keys -t  "$outputPaneID" ". lo-utils" Enter
try tmux send-keys -t  "$outputPaneID" "sleep 1; ~/prj/lo/behold +F ~/log/latest.txt" Enter

