#!/bin/bash

. rabot-utils
if [ "$?" -ne "0" ]; then
  echo "$0: Error while sourcing rabot-utils" >&2
  exit 1
fi

. lo-utils
if [ "$?" -ne "0" ]; then
  echo "$0: Error while sourcing lo-utils" >&2
  exit 1
fi

scriptName=$(basename "$0")
scriptFullPath=$(readlink -f "$scriptName")
#echo scriptFullPath=$scriptFullPath

function showHelp
{
cat << DOCSTRING
Usage: $scriptName

If not in a tmux session: '$scriptName' starts a tmux session.
Then, a 2-pane left/right layout is created.
DOCSTRING
}

checkForHelp $1
require tmux

# Obain path to parent dir
PARENT_DIR="$(dirname $(readlink -f "$0"))"


############################################################
#
# Get ID of the current pane
#
# getCurrentPaneIndex
#
function getCurrentPaneID
{
    tmux display-message -p "#{pane_id}"
}


############################################################
#
# Get ID of other pane than current one
#
# getOtherPaneID
#
function getOtherPaneID
{
    tmux list-panes -F "#{pane_id}" | grep -v $(getCurrentPaneID)
}


############################################################
#
# Print the number of panes in the current window
#
# numPanes
#
function numPanes
{
    try test -n "$TMUX"
    tmux display-message -p "#{window_panes}"
}


############################################################
#
# List all panes in current session, or in specified window only.
# On one line for every pane, print: window_id pane_id pane_title.
#
# listPanes [WINDOW_ID]
#
# WINDOW_ID : if specified, print only panes belonging to WINDOW_ID
#
function listPanes
{
    try test -n "$TMUX"
    local formatString="#{window_id} #{window_name} #{pane_id} #{pane_title}"

    if [ -n "$1" ]; then
        tmux list-panes -F "$formatString" -t "$1"
    else
        tmux list-panes -sF "$formatString"
    fi
}


# Write stdin to logfile
logop <&0  > /dev/null &

# If not in a tmux session: abort
if [ -z "$TMUX" ]; then

    exitWith 1 "ERROR: '$(basename "$0")' needs to be run inside 'tmux'"

else

    local windowName="$(tmux display-message -p "#{window_name}")"

    # If in a tmux session: check if we are in a 'lo' session
    if [ "$windowName" = "lo-front" ]; then

        editPaneID="$(listPanes | grep lo-edit | cut -d ' ' -f 1)"
        outputPaneID="$(listPanes | grep lo-output | cut -d ' ' -f 1)"

        try test -n "$editPanelID"
        try test -n "$outputPanelID"

    else

        # We are in a tmux session, but not yet a 'lo' session

        # Store current window ID
        preLoWindowID=$(getWindowID)

        # Create 'lo-front' window in the background
        windowAndPane="$(tmux new-window -dP -F "#{window_id} #{pane_id}" -n lo-front "vim")"
        frontWindowID="$(echo "$windowAndPane" | cut -d ' ' -f 1)"
        try test -n "$frontWindowID"

        # The pane auto-created with the lo-front window is the 'lo-edit' pane
        editPaneID="$(echo "$windowAndPane" | cut -d ' ' -f 2)"
        try test -n "$editPaneID"
        try tmux select-pane -T lo-edit -t "$editPaneID"

        # Split off output pane from edit pane
        outputPaneID=$(tmux split-window -hdP -p 50 -t "$editPaneID" -F "#{pane_id}" "less +F $PARENT_DIR/argtest.txt")
        try test -n "$outputPaneID"
        try tmux select-pane -T lo-output -t "$outputPaneID"

        # Split off monitor pane from output pane
        monitorPaneID=$(tmux split-window -vdb -p 25 -t "$outputPaneID" "$PARENT_DIR/monitor"
        try test -n "$monitorPaneID"
        try tmux select-pane -T lo-monitor -t "$monitorPaneID"

        # Create 'lo-back' window in the background
        windowAndPane="$(tmux new-window -dP -F "#{window_id} #{pane_id}" -n lo-back)"
        backWindowID="$(echo "$windowAndPane" | cut -d ' ' -f 1)"
        try test -n "$backWindowID"

        # The pane auto-created with the lo-back window is the 'lo-placeholder' pane
        placeholderPaneID="$(echo "$windowAndPane" | cut -d ' ' -f 2)"
        try test -n "$placeholderPaneID"
        try tmux select-pane -T lo-edit -t "$placeholderPaneID"

        # TODO : switch to 'lo-front' window




#
#        # Rename the current window to 'lo-back'
#        try tmux rename-window lo-back
#
#        # Create 'lo-front' window in the background
#        try tmux new-window -d -n lo-front
#
#        try tmux split-window -h -d -p 50 "bash"
#
#
#        # Create a second pane, if absent
#        if [ $(numPanes) -lt 2 ]; then
#            # -h : split horizontally
#            # -d : don't switch focus to new pane
#            # -p 50 : split evenly (50%)
#            # "bash" : run "bash" in new window
#            try tmux split-window -h -d -p 50 "bash"
#        fi
#
#        # Set the title of the current pane
#        try tmux select-pane -T lo-edit
#
#        # Start vim in edit pane
#        editPaneID="$(getCurrentPaneID)"
#        try tmux send-keys -t "$editPaneID" "vim" Enter
#
#        # Set the title of the other pane to 'lo-output'
#        outputPaneID="$(getOtherPaneID)"
#        try tmux select-pane -T lo-output -t "$outputPaneID"
#
#        # Switch focus to 'lo-output'
#        try tmux select-pane -t "$outputPaneID"
#
#        # Split off monitor pane from output pane
##        try tmux split-window -vdb -p 25 -t "$outputPaneID" "vim -R -u monitor.vim"
#        try tmux split-window -vdb -p 25 -t "$outputPaneID" "$PARENT_DIR/monitor"
#
#        # Monitor pane is the current one. Set its title.
#        try tmux select-pane -T lo-monitor
#
#        # Switch focus to 'lo-output' again
#        try tmux select-pane -t "$outputPaneID"

    fi

fi

# Start 'less +F ...' in output pane
try tmux send-keys -t  "$outputPaneID" ". lo-utils" Enter
try tmux send-keys -t  "$outputPaneID" "sleep 1; $PARENT_DIR/behold +F ~/log/latest.txt" Enter
