#!/bin/bash

. rabot-utils
if [ "$?" -ne "0" ]; then
  echo "$0: Error while sourcing rabot-utils" >&2
  exit 1
fi

. lo-utils
if [ "$?" -ne "0" ]; then
  echo "$0: Error while sourcing lo-utils" >&2
  exit 1
fi

scriptName=$(basename "$0")
scriptFullPath=$(readlink -f "$scriptName")
#echo scriptFullPath=$scriptFullPath

function showHelp
{
cat << DOCSTRING
Usage: $scriptName

If not in a tmux session: '$scriptName' starts a tmux session.
Then, a 2-pane left/right layout is created.
DOCSTRING
}

checkForHelp $1
require tmux

# Obain path to parent dir
PARENT_DIR="$(dirname $(readlink -f "$0"))"


############################################################
#
# Get ID of the current pane
#
# getCurrentPaneIndex
#
function getCurrentPaneID
{
    tmux display-message -p "#{pane_id}"
}


############################################################
#
# Get ID of other pane than current one
#
# getOtherPaneID
#
function getOtherPaneID
{
    tmux list-panes -F "#{pane_id}" | grep -v $(getCurrentPaneID)
}


############################################################
#
# Print the number of panes in the current window
#
# numPanes
#
function numPanes
{
    try test -n "$TMUX"
    tmux display-message -p "#{window_panes}"
}


############################################################
#
# List all panes in current session, or in specified window only.
# On one line for every pane, print: window_id pane_id pane_title.
#
# listPanes [WINDOW_ID]
#
# WINDOW_ID : if specified, print only panes belonging to WINDOW_ID
#
function listPanes
{
    try test -n "$TMUX"
    local formatString="#{window_id} #{window_name} #{pane_id} #{pane_title}"

    if [ -n "$1" ]; then
        tmux list-panes -F "$formatString" -t "$1"
    else
        tmux list-panes -sF "$formatString"
    fi
}

# Write stdin to logfile
logop <&0  > /dev/null &

# Abort if we are not in a tmux session
if [ -z "$TMUX" ]; then
    exitWith 1 "Error: you must be in a tmux session to start '$scriptName'"
fi

# Store existing tmux session ID & name
oldSessionIDName="$(tmux display-message -p "#{session_id} #{session_name}")"
oldSessionID="$(echo "$oldSessionIDName" | cut -d ' ' -f 1)"
oldSessionName="$(echo "$oldSessionIDName" | cut -d ' ' -f 2)"
try test -n "$oldSessionID"
try test -n "$oldSessionName"

# Check if we are in a 'lo' session
if [ "$oldSessionName" = "lo" ]; then

    # Obtain the pane IDs of the existing 'lo' session
    editPaneID="$(listPanes | grep lo-edit | cut -d ' ' -f 1)"
    outputPaneID="$(listPanes | grep lo-output | cut -d ' ' -f 1)"
    try test -n "$editPanelID"
    try test -n "$outputPanelID"

else

    # Not in a 'lo' session: create a 'lo' session
    # in the background and then switch to it

    # Create a new tmux session in the background
    sessionWindowPane="$(tmux new-session -dP -F "#{session_id} #{window_id} #{pane_id}" -n lo-front -s lo -x "$(tput cols)" -y "$(tput lines)" "vim")"

    # Obtain the IDs of the session and its auto-created window & pane
    sessionID="$(echo "$sessionWindowPane" | cut -d ' ' -f 1)"
    frontWindowID="$(echo "$sessionWindowPane" | cut -d ' ' -f 2)"
    editPaneID="$(echo "$sessionWindowPane" | cut -d ' ' -f 3)"
    try test -n "$sessionID"
    try test -n "$frontWindowID"
    try test -n "$editPaneID"

    # Set the title of the edit pane
    try tmux select-pane -T lo-edit -t "$editPaneID"

    # Split off output pane from edit pane
    outputPaneID="$(tmux split-window -hdP -F "#{pane_id}" -p 50 -t "$editPaneID" "$PARENT_DIR/do-output")"
    try test -n "$outputPaneID"
    try tmux select-pane -T lo-output -t "$outputPaneID"

    # Split off monitor pane from output pane
    monitorPaneID="$(tmux split-window -vdbP -l 5 -t "$outputPaneID" "$PARENT_DIR/do-monitor" -F "#{pane_id}")"
    try test -n "$monitorPaneID"
    try tmux select-pane -T lo-monitor -t "$monitorPaneID"

    # Create 'lo-back' window in the background
    windowAndPane="$(tmux new-window -dP -F "#{window_id} #{pane_id}" -n lo-back -t "$sessionID")"
    backWindowID="$(echo "$windowAndPane" | cut -d ' ' -f 1)"
    try test -n "$backWindowID"

    # Set the title of the placeholder pane
    placeholderPaneID="$(echo "$windowAndPane" | cut -d ' ' -f 2)"
    try test -n "$placeholderPaneID"
    try tmux select-pane -T lo-placeholder -t "$placeholderPaneID"

    # Switch to newly created session
    tmux switch-client -t "$sessionID"

fi
