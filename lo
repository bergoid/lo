#!/bin/bash

. rabot-utils
if [ "$?" -ne "0" ]; then
  echo "$0: Error while sourcing rabot-utils" >&2
  exit 1
fi

scriptName=$(basename "$0")
scriptFullPath=$(readlink -f "$scriptName")
#echo scriptFullPath=$scriptFullPath

function showHelp
{
cat << DOCSTRING
Usage: $scriptName

If not in a tmux session: '$scriptName' starts a tmux session.
Then, a 2-pane left/right layout is created.
DOCSTRING
}

checkForHelp $1

############################################################
#
# List all tmux session names on stdout,
# one session per line
#
# listSessions
#
function listSessions
{
    tmux list-sessions -F "#{session_name}"
}

############################################################
#
# List all windows of a given tmux session on stdout,
# one window per line
#
# listWindows SESSION
#
function listWindows
{
    try test -n "$1"
    tmux list-windows -F "#{window_name}" -t "$1"
}

############################################################
#
# List all panes of a given tmux window on stdout,
# one pane per line
#
# listPanes
#
function listPanes
{
    try test -n "$1"
    tmux list-panes -F "#{pane_index}" -t "$1"
}


############################################################
#
# Print the number of windows in the current session
#
# numWindows
#
function numWindows
{
    try test -n "$TMUX"
    tmux display-message -p "#{session_windows}"
}


############################################################
#
# Print the number of panes in the current window
#
# numPanes
#
function numPanes
{
    try test -n "$TMUX"
    tmux display-message -p "#{window_panes}"
}

function getOtherPaneIndex
{
    tmux list-panes -F "#{pane_index}" | grep -v $(tmux display-message -p "#{pane_index}")
}

# Write stdin to logfile
logop <&0  > /dev/null &

# If not in a tmux session: abort
if [ -z "$TMUX" ]; then

    exitWith 1 "ERROR: '$(basename "$0")' needs to be run inside 'tmux'"

else

    # If in a tmux session: check the number of windows & panes
    if [ $(numWindows) -gt 1 ]; then
        errcho "ERROR: '$(basename "$0")' must started from a tmux session with at most 1 window"
        errcho "Current number of windows: $(numWindows)"
        exit 1
    fi

    if [ $(numPanes) -gt 2 ]; then
        errcho "ERROR: '$(basename "$0")' must started from a tmux session with at most 2 panes"
        errcho "Current number of panes: $(numPanes)"
        exit 1
    fi

    # Create a second pane, if absent
    if [ $(numPanes) -lt 2 ]; then
        tmux split-window -h -p 50 "bash"
    fi

fi

# Start 'less +F ...' in other pane than the current one
tmux send-keys -t $(getOtherPaneIndex) "sleep 1; ~/prj/lo/behold +F ~/log/latest.txt" Enter


