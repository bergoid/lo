#!/bin/bash

#[ -n "$LO_UTILS" ] && return || readonly LO_UTILS=1

. rabot-utils
if [ "$?" -ne "0" ]; then
  echo "$0: Error while sourcing rabot-utils" >&2
  exit 1
fi


############################################################
#
# Get ID of the pane with the given title, or the current pane
#
# getPaneID [PANE_TITLE]
#
function getPaneID
{
    if [ -n "$1" ]; then
        tmux list-panes -sF "#{pane_id} #{pane_title}" | grep "${1}$" | cut -d ' ' -f 1
    else
        tmux display-message -p "#{pane_id}"
    fi
}


############################################################
#
# Get ID of the window with the given name, or the current window
#
# getWindowID [WINDOW_NAME]
#
function getWindowID
{
    if [ -n "$1" ]; then
        tmux list-windows -sF "#{window_id} #{window_name}" | grep "${1}$" | cut -d ' ' -f 1
    else
        tmux display-message -p "#{window_id}"
    fi
}


############################################################
#
# Send a sequence of keypresses to a tmux pane
#
# sendKeysToPane PANE KEYS
#
# PANE : a string identifying the pane
#   possible values:
#       "edit": the edit pane
#       "output": the (current) output pane
#   any other string will be considered to mean the monitor pane
#
# KEYS : the key sequence
#
function sendKeysToPane
{
    logMessage "sendKeysToPane $1 $2"

    if [ -z "$2" ]; then
        logMessage "ERROR: sendKeysToPane: empty key sequence"
        if [ -z "$1" ]; then
            logMessage "ERROR: sendKeysToPane: empty pane ID/title"
        fi
        return
    fi

    local paneIdVar=

    case "$1" in
        "edit") paneIdVar="@editPaneID";;
        "output") paneIdVar="@outputPaneID";;
        *) paneIdVar="@monitorPaneID";;
    esac

    tmux send-keys -t "$(tmux show-options -v $paneIdVar)" "$2"
}


############################################################
#
# Save file currently open in 'vim' and exit 'lo'
#
function saveAndExitLo
{
    # Save file & close vim
    sendKeysToPane edit ",M-F12"


}


############################################################
#
# Exit 'lo' without saving file in 'vim'
#
function exitLo
{
    echo hihi
}


############################################################
#
# Send a command to the monitor process
#
#  sendCommandToMonitor PREFIX PAYLOAD
#
#  PREFIX : a character indicating the type of command
#           Possible values:
#               p : in the editor, show the location: path:line:column
#                   as indicated by PAYLOAD
#
#  PAYLOAD : the command payload
#
function sendCommandToMonitor
{
    : ${monitorId:=$(getPaneID lo-monitor)}

    if [ -z "$2" ]; then

        logMessage "ERROR: sendCommandToMonitor: empty payload"

        if [ -z "$1" ]; then

            logMessage "ERROR: sendCommandToMonitor: empty prefix"

        fi

        return

    fi

    tmux send-keys -t "$monitorId" ",${1}${2}" Enter
}


############################################################
#
#  logMessage [ARGS]
#
function logMessage
{
    echo "$(date +"%Y-%m-%d %H:%M:%S") $*" >> ~/prj/lo/mylog.txt
}


############################################################
#
# gotoPalico PATH [LINE [COLUMN]]
#
function gotoPalico
{
    : ${editId:=$(getPaneID lo-edit)}

    local path="$1"
    local line="${2:-0}"
    local column="${3:-0}"

    if [ -n "$path" ]; then
        tmux send-keys -t "$editId" ":e $path|call cursor($line,$column)|norm zz" Enter
        tmux select-pane -t "$editId"
    fi
}

export -f getPaneID
export -f gotoPalico
export -f logMessage
export -f sendKeysToPane
export -f saveAndExitLo
export -f exitLo
