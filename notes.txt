. BUG: first keypress of 'f6' does nothing

. monitor pane
    v name: lo-monitor
    v top right
    . make position configurable
    v run vim inside the pane
        v monitor.vim
    . auto resize pane to total number of lines
    . accept key sequences
        . leader key
            . comma?
            . a character string follows, terminated by <Enter>
                . handle this sequence in a switch/case
        . palico too?
        . function keys
            . examples:
                . F2: ",f2<Enter>"
                . Shift-F6: ",sf6<Enter>"
                . Alt-F7: ",mf7<Enter>"
    . show list of processes, each belonging to another pane that can be swapped into the "output pane" position
    . every process on another line. Each line containing:
        . the exit status of the process, or 3 spaces if not yet finished
        . the full path to the executable
        . all arguments passed when starting the process
    . when another line in the monitor is selected, the current output pane is swapped out for the selected one

. check if already in 'lo' session
    . check for the existence of a pane called 'lo-monitor'
        . optionally: 'lo-edit'?

. 'behold' modes:
    . normal 'ctrl-C'
        . don't reload
    . reload 'R'
        . reload every n seconds
    . follow 'F'
        . like 'reload', but scroll to the bottom after every reload.

    . 'behold' should be able to switch automatically from 'follow' to 'reload' when the first match is  found.

. behold.vim still allows: ':w!'
    . this will update the timestamp of the logfile
    . disallow this
        . disallow individual command(s)?
        . is there a switch to disallow all file writes?

. TODO : why does 'vim' need to be started in new bash session?

. Later on, if 'lo' is started from a session with more than 1 existing pane: move all other panes to the right & make them accessible with the 'browser' menu in the top right.

. behold:

    . ctrl-F12 doesn't close file:
        . "W10: Warning: Changing a readonly file"

        and also:

        . 'E21: Cannot make changes, 'modifiable' is off'

        . add mappings from ~/.vim:
            . escseq-default.vim
            . mappings.vim
            . copy Mapam from tools.vim into behold.vim

    v check if vim can show part of very long line at the bottom

. when starting 'lo':
    v create new detached tmux session and add all windows & panes to it
    v switch to this session
        v from outside tmux session: tmux attach-session
        v from existing non-'lo' tmux session: tmux switch-client

v try to develop a custom search function
    v grp something and pipe results to file
    v 'streamcat' this file to lo
    v search pattern: ^filepath:line:column
    v vimscript function:
        v execute normal '/' etc
        v try to extract path, line & col
        v send keys to L panel that open filepath and put cursor on line & col
            v start lo& normally, then start vim in same (L) terminal

v create 'streamcat':
    $ streamcat 3 1 myfile.txt
        prints every 3 seconds a line from myfile.txt to stdout

    $ streamcat 5 10 myfile.txt
        prints every 5 seconds a burst of 10 lines from myfile.txt to stdout

v This command:
    $ streamcat 5 5 myfile.txt | lo

  should tail the output of streamcat in the R panel, with 'behold +F'


v
    $ aloop hi 10 | lo&

  the output of 'aloop' should appear in the R panel, tailed by 'less +F'

v 'behold' script should only accept a filename to tail, and never stdin

v
    $ aloop hi 10 | lo&

  the output of 'aloop' should appear in the R panel, tailed by 'behold +F'


v adapt dwm to auto-start tmux

v   usage patterns like this:

        aloop hello 200 | ./lo2 &

    can only be started from inside a tmux session
    Enforce the presence of $TMUX

v  can we add a panel to the existing session from a process "to the right" of the '|' symbol?
    --> YES

    $ aloop hi 10 | lo

v    the output of 'aloop' should be piped to a logfile. in the R panel this file can be tailed with 'less +F'

================================================================================

In terminal:

    $ nohup logop aloop A 300 &
    $ disown

No further messages appear in the terminal, also not when the process is terminated

================================================================================

tmux list-sessions -F 'Session: #{session_name}, Number of windows: #{session_windows}, Number of panes: #{window_panes}, Name of window: #{window_name}, Title of pane: #{pane_title}'

================================================================================

bash functions to inspect tmux sessions/windows/panes tree:

listSessions: list all session names on stdout, one session per line

listWindows SESSION: list all window names of a given session on stdout, one window per line

listPanes WINDOW: list all pane names of a given window on stdout, one pane per line

https://codeyarns.com/2010/11/28/vim-ruler-and-default-ruler-format/

================================================================================
pager.vim
---------

v F to follow
v ctrl-c to stop following
v q to quit
x handle (color) escape sequences
    vim's 'conceal' feature doesn't rearrange the line wrap positions, resulting in premature line breaks in the highlighted text where all escape sequences are concealed.
    --> strip all ANSI escape sequences instead, and rely on a fixed format to (re-)highlight grep-like output and log output.

. at bottom, show message in grey reversed to indicate follow/no-follow
    --> should be in "command line" because status line wastes vertical screen estate

. ways to start 'lo':
    . $ lo
        . checks if tmux is running:
            if [ -n "$TMUX" ]; then
                exit 1
            fi
        . checks if lo is already running:
            if [ -n "$LO_SESSION" ]; then
                exit 1
            else
                export LO_SESSION="/tmp/lo-1000"
            fi
        .

. 'vim -' :
    don't wait for EOF before showing contents: how?

================================================================================

. lo script
    . meant to be sourced?
        . contains bash functions

    . or to be run?
        . takes command name as 1st argument

. Run 'lo' at command line
    . if inside tmux session: abort
    . 'tmux list-sessions' is run to check for existing 'lo[0-9]*' sessions
    . a new tmux session 'lo<N>' is created (and attached to)
    . Two L/R panes are created
    . In the L pane: vim is launched (no underlying bash?)
        --> remap 'quit' keybindings (like ZZ, ZQ, C-F12, A-F12, ...) to only close file without quitting vim
        --> new keybinding to quit vim
    . In the R pane: bash terminal
    . Optional argument: file to be opened by vim in L pane

. Run 'lo' by piping input into it:
    . example: some_command | lo
    . if not inside tmux session:
        . create new lo tmux session
        . tail output of some_command in R pane
    . if inside non-lo tmux session: abort
    . if inside other 'lo[0-9]*' session:
        . tail output of some_command in R pane

. lo commands:
    create : create 2-pane tmux session
        --> needed? wouldn't this be the default action without arguments?

    run : run a given command, pipe the output to a logfile and tail that file in the R pane. The following commands will make use of 'run':

    buildfile : compile 1 file
    build : Walk up dir path given as argument. As soon as a makefile is found: make
    buildall : Walk up dir path given as argument. If a makefile is found, store its path in a variable. Overwrite this value every time. Continue until root dir. Run make on makefile in variable.

    cleanfile
    clean
    cleanall


. 2 tmux panes
    . L : vim
    . R : less +F ~/log/latest.txt
    --> name them E(dit) & O(utput)? Position on screen configurable.
        3rd pane C(ommand)

. auto-reload file in vim:
    :h autoread

. vim async features:
    :h timer_start
    :h channel

. things needed along with lo:
    . rabot
    . vim as pager
    . babs

    not necessary:
        . preppy
        . vim plugins

==========================================================================================
https://vim.fandom.com/wiki/Using_vim_as_a_syntax-highlighting_pager

If you want to use Vim's syntax highlighting in a pager, here's how. Since version 6, Vim comes with a script $VIMRUNTIME/macros/less.sh, and this gives syntax highlighting in a pager. See :help less.

The original tip (below) was for a "more"-style pager. It is kept here because it explains the principles nicely.

First, create a vimrc like the following – I called mine ~/.vimrc.more



" No compatibility – necessary for mappings to work.
set nocompatible

" Status line
set laststatus=0
set cmdheight=1
set nomodifiable " Only in version 6.0
set readonly

" My xterms have a navy-blue background, so I need this line too.
set background=dark

" Turn syntax on
syntax enable

" No menu bar and tool bar
set guioptions=aiMr

" Key bindings.
nmap b <C-B><C-G>
nmap q :q!<CR>
nmap <Up> <C-Y>
nmap <Down> <C-E>

" To type the following line, type *two* C-V's followed by two spaces. This
" is how you map the spacebar.
nmap ^V <C-F><C-G>
